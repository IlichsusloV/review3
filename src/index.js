// Review Ozon ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–∑—ã–≤–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç—ã

import { useState } from "react"

export default function ReviewOzon() {
  const [clientId, setClientId] = useState("")
  const [apiKey, setApiKey] = useState("")
  const [status, setStatus] = useState("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
  const [feedbacks, setFeedbacks] = useState([])
  const [answers, setAnswers] = useState([])

  const handleConnect = async () => {
    if (!clientId || !apiKey) return alert("–í–≤–µ–¥–∏—Ç–µ Client ID –∏ API Key")
    setStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon...")

    try {
      const response = await fetch("https://api-seller.ozon.ru/v1/feedback/list", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Client-Id": clientId,
          "Api-Key": apiKey,
        },
        body: JSON.stringify({
          page: 1,
          page_size: 5,
        })
      })

      const data = await response.json()

      if (data.result && data.result.feedbacks) {
        const fbList = data.result.feedbacks
        setFeedbacks(fbList)
        setStatus("–û—Ç–∑—ã–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ")

        const generated = fbList.map((fb) => {
          const base = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ù–∞–º –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º üòä –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
          return {
            id: fb.id,
            answer: base
          }
        })
        setAnswers(generated)
      } else {
        setStatus("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã ‚ùå")
      }
    } catch (error) {
      setStatus("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚ùå")
      console.error(error)
    }
  }

  const handleAnswerChange = (index, newText) => {
    const updated = [...answers]
    updated[index].answer = newText
    setAnswers(updated)
  }

  const sendAnswer = async (index) => {
    const answerText = answers[index]?.answer
    const feedbackId = answers[index]?.id

    if (!answerText || !feedbackId) return alert("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ ID")

    try {
      const response = await fetch("https://api-seller.ozon.ru/v1/feedback/answer", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Client-Id": clientId,
          "Api-Key": apiKey,
        },
        body: JSON.stringify({
          feedback_id: feedbackId,
          text: answerText
        })
      })

      if (response.ok) {
        alert("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ ‚úÖ")
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ ‚ùå")
      }
    } catch (err) {
      console.error(err)
      alert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon ‚ùå")
    }
  }

  return (
    <div style={{ padding: 20 }}>
      <h1 style={{ fontSize: 24, fontWeight: "bold" }}>Review Ozon</h1>
      <p style={{ marginTop: 10 }}>–í–≤–µ–¥–∏—Ç–µ Client ID –∏ API Key:</p>
      <input
        placeholder="Client ID"
        value={clientId}
        onChange={(e) => setClientId(e.target.value)}
        style={{ display: "block", marginBottom: 10, padding: 8, width: 300 }}
      />
      <input
        placeholder="API Key"
        value={apiKey}
        onChange={(e) => setApiKey(e.target.value)}
        style={{ display: "block", marginBottom: 10, padding: 8, width: 300 }}
      />
      <button onClick={handleConnect} style={{ padding: 10 }}>
        –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã
      </button>
      <p style={{ color: "green", marginTop: 10 }}>{status}</p>

      {feedbacks.length > 0 && (
        <div style={{ marginTop: 20 }}>
          <h2 style={{ fontSize: 20 }}>–û—Ç–∑—ã–≤—ã –∏ –æ—Ç–≤–µ—Ç—ã:</h2>
          <ul>
            {feedbacks.map((fb, i) => (
              <li key={i} style={{ marginTop: 10, borderBottom: "1px solid #ccc", paddingBottom: 10 }}>
                <p><strong>ID –æ—Ç–∑—ã–≤–∞:</strong> {fb.id}</p>
                <p><strong>–û—Ü–µ–Ω–∫–∞:</strong> {fb.grade} ‚≠ê</p>
                <p><strong>–î–∞—Ç–∞:</strong> {fb.created_at}</p>
                <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {fb.text || "(–ø—É—Å—Ç–æ)"}</p>

                <textarea
                  value={answers[i]?.answer || ""}
                  onChange={(e) => handleAnswerChange(i, e.target.value)}
                  rows={3}
                  style={{ width: "100%", padding: 8 }}
                />
                <button onClick={() => sendAnswer(i)} style={{ marginTop: 5, padding: 8 }}>
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<ReviewOzon />);
